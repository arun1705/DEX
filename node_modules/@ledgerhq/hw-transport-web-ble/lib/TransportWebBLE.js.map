{"version":3,"sources":["../src/TransportWebBLE.js"],"names":["deviceOrId","needsReconnect","device","transportsCache","next","type","message","bluetooth","requiresBluetooth","requestDevice","requestDeviceParam","gatt","connected","connect","retrieveService","service","infos","deviceModel","writeUuid","notifyUuid","Promise","all","getCharacteristic","writeC","notifyC","notifyObservable","pipe","value","toString","notif","subscribe","transport","BluetoothTransport","id","onDisconnect","console","log","e","notYetDisconnected","unsubscribe","removeEventListener","emit","addEventListener","beforeMTUTime","Date","now","inferMTU","afterMTUTime","disconnect","setTimeout","s","open","navigator","Error","availability","create","onAvailabilityChanged","observer","unsubscribed","getAvailability","then","available","filters","map","services","uuid","getPrimaryServices","descriptor","complete","error","writeCharacteristic","mtuSize","exchange","apdu","exchangeAtomicImpl","debug","msgIn","write","toPromise","data","msgOut","String","buffer","writeValue","mtu","readUInt8","Buffer","from","exchangeBusyPromise","isSupported","resolve","observeAvailability","list"],"mappings":"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","file":"TransportWebBLE.js","sourcesContent":["// @flow\n/* eslint-disable prefer-template */\n\nimport Transport from \"@ledgerhq/hw-transport\";\nimport {\n  DisconnectedDevice,\n  TransportOpenUserCancelled\n} from \"@ledgerhq/errors\";\nimport {\n  getBluetoothServiceUuids,\n  getInfosForServiceUuid\n} from \"@ledgerhq/devices\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport { Observable, defer, merge, from } from \"rxjs\";\nimport { share, ignoreElements, first, map, tap } from \"rxjs/operators\";\nimport { logSubject } from \"./debug\";\nimport type { Device, Characteristic } from \"./types\";\nimport { sendAPDU } from \"./sendAPDU\";\nimport { receiveAPDU } from \"./receiveAPDU\";\nimport { monitorCharacteristic } from \"./monitorCharacteristic\";\n\nconst requiresBluetooth = () => {\n  // $FlowFixMe\n  const { bluetooth } = navigator;\n  if (typeof bluetooth === \"undefined\") {\n    throw new Error(\"web bluetooth not supported\");\n  }\n  return bluetooth;\n};\n\nconst availability = (): Observable<boolean> =>\n  Observable.create(observer => {\n    const bluetooth = requiresBluetooth();\n    const onAvailabilityChanged = e => {\n      observer.next(e.value);\n    };\n    bluetooth.addEventListener(\"availabilitychanged\", onAvailabilityChanged);\n    let unsubscribed = false;\n    bluetooth.getAvailability().then(available => {\n      if (!unsubscribed) {\n        observer.next(available);\n      }\n    });\n    return () => {\n      unsubscribed = true;\n      bluetooth.removeEventListener(\n        \"availabilitychanged\",\n        onAvailabilityChanged\n      );\n    };\n  });\n\nconst transportsCache = {};\n\nconst requestDeviceParam = () => ({\n  filters: getBluetoothServiceUuids().map(uuid => ({\n    services: [uuid]\n  }))\n});\n\nconst retrieveService = async device => {\n  if (!device.gatt) throw new Error(\"bluetooth gatt not found\");\n  const [service] = await device.gatt.getPrimaryServices();\n  if (!service) throw new Error(\"bluetooth service not found\");\n  const infos = getInfosForServiceUuid(service.uuid);\n  if (!infos) throw new Error(\"bluetooth service infos not found\");\n  return [service, infos];\n};\n\nasync function open(deviceOrId: Device | string, needsReconnect: boolean) {\n  let device;\n  if (typeof deviceOrId === \"string\") {\n    if (transportsCache[deviceOrId]) {\n      logSubject.next({\n        type: \"verbose\",\n        message: \"Transport in cache, using that.\"\n      });\n      return transportsCache[deviceOrId];\n    }\n\n    const bluetooth = requiresBluetooth();\n\n    // TODO instead we should \"query\" the device by its ID\n    device = await bluetooth.requestDevice(requestDeviceParam());\n  } else {\n    device = deviceOrId;\n  }\n\n  if (!device.gatt.connected) {\n    logSubject.next({\n      type: \"verbose\",\n      message: \"not connected. connecting...\"\n    });\n    await device.gatt.connect();\n  }\n\n  const [service, infos] = await retrieveService(device);\n  const { deviceModel, writeUuid, notifyUuid } = infos;\n  const [writeC, notifyC] = await Promise.all([\n    service.getCharacteristic(writeUuid),\n    service.getCharacteristic(notifyUuid)\n  ]);\n\n  const notifyObservable = monitorCharacteristic(notifyC).pipe(\n    tap(value => {\n      logSubject.next({\n        type: \"ble-frame-read\",\n        message: value.toString(\"hex\")\n      });\n    }),\n    share()\n  );\n\n  const notif = notifyObservable.subscribe();\n\n  const transport = new BluetoothTransport(\n    device,\n    writeC,\n    notifyObservable,\n    deviceModel\n  );\n\n  if (!device.gatt.connected) {\n    throw new DisconnectedDevice();\n  }\n\n  transportsCache[transport.id] = transport;\n  const onDisconnect = e => {\n    console.log(\"onDisconnect!\", e);\n    delete transportsCache[transport.id];\n    transport.notYetDisconnected = false;\n    notif.unsubscribe();\n    device.removeEventListener(\"gattserverdisconnected\", onDisconnect);\n    logSubject.next({\n      type: \"verbose\",\n      message: `BleTransport(${transport.id}) disconnected`\n    });\n    transport.emit(\"disconnect\", e);\n  };\n  device.addEventListener(\"gattserverdisconnected\", onDisconnect);\n\n  let beforeMTUTime = Date.now();\n  try {\n    await transport.inferMTU();\n  } finally {\n    let afterMTUTime = Date.now();\n\n    // workaround for #279: we need to open() again if we come the first time here,\n    // to make sure we do a disconnect() after the first pairing time\n    // because of a firmware bug\n\n    if (afterMTUTime - beforeMTUTime < 1000) {\n      needsReconnect = false; // (optim) there is likely no new pairing done because mtu answer was fast.\n    }\n\n    if (needsReconnect) {\n      await device.gatt.disconnect();\n      // necessary time for the bonding workaround\n      await new Promise(s => setTimeout(s, 4000));\n    }\n  }\n\n  if (needsReconnect) {\n    return open(device, false);\n  }\n\n  return transport;\n}\n\n/**\n * react-native bluetooth BLE implementation\n * @example\n * import BluetoothTransport from \"@ledgerhq/hw-transport-web-ble\";\n */\nexport default class BluetoothTransport extends Transport<Device | string> {\n  static isSupported = (): Promise<boolean> =>\n    Promise.resolve()\n      .then(requiresBluetooth)\n      .then(() => true, () => false);\n\n  /**\n   * observe event with { available: bool, type: string }\n   * (available is generic, type is specific)\n   * an event is emit once and then each time it changes\n   */\n  static observeAvailability = (observer: *) =>\n    availability.subscribe(observer);\n\n  static list = (): * => Promise.resolve([]);\n\n  /**\n   * Scan for Ledger Bluetooth devices.\n   * On this web implementation, it only emits ONE device, the one that was selected in the UI (if any).\n   */\n  static listen(observer: *) {\n    logSubject.next({\n      type: \"verbose\",\n      message: \"listen...\"\n    });\n\n    let unsubscribed;\n\n    const bluetooth = requiresBluetooth();\n\n    bluetooth.requestDevice(requestDeviceParam()).then(\n      async device => {\n        if (!unsubscribed) {\n          observer.next({\n            type: \"add\",\n            descriptor: device\n          });\n          observer.complete();\n        }\n      },\n      error => {\n        observer.error(new TransportOpenUserCancelled(error.message));\n      }\n    );\n    function unsubscribe() {\n      unsubscribed = true;\n    }\n    return { unsubscribe };\n  }\n\n  /**\n   * open a bluetooth device.\n   */\n  static async open(deviceOrId: Device | string) {\n    return open(deviceOrId, true);\n  }\n\n  /**\n   * globally disconnect a bluetooth device by its id.\n   */\n  static disconnect = async (id: *) => {\n    logSubject.next({\n      type: \"verbose\",\n      message: `user disconnect(${id})`\n    });\n    const transport = transportsCache[id];\n    if (transport) {\n      transport.device.gatt.disconnect();\n    }\n  };\n\n  id: string;\n\n  device: Device;\n\n  mtuSize: number = 20;\n\n  writeCharacteristic: Characteristic;\n\n  notifyObservable: Observable<Buffer>;\n\n  notYetDisconnected = true;\n\n  deviceModel: DeviceModel;\n\n  constructor(\n    device: Device,\n    writeCharacteristic: Characteristic,\n    notifyObservable: Observable<*>,\n    deviceModel: DeviceModel\n  ) {\n    super();\n    this.id = device.id;\n    this.device = device;\n    this.writeCharacteristic = writeCharacteristic;\n    this.notifyObservable = notifyObservable;\n    this.deviceModel = deviceModel;\n\n    logSubject.next({\n      type: \"verbose\",\n      message: `BleTransport(${String(this.id)}) new instance`\n    });\n  }\n\n  async inferMTU() {\n    let mtu = 23;\n\n    await this.exchangeAtomicImpl(async () => {\n      try {\n        mtu =\n          (await merge(\n            this.notifyObservable.pipe(\n              first(buffer => buffer.readUInt8(0) === 0x08),\n              map(buffer => buffer.readUInt8(5))\n            ),\n            defer(() => from(this.write(Buffer.from([0x08, 0, 0, 0, 0])))).pipe(\n              ignoreElements()\n            )\n          ).toPromise()) + 3;\n      } catch (e) {\n        logSubject.next({\n          type: \"ble-error\",\n          message: \"inferMTU got \" + String(e)\n        });\n        this.device.gatt.disconnect();\n        throw e;\n      }\n    });\n\n    if (mtu > 23) {\n      const mtuSize = mtu - 3;\n      logSubject.next({\n        type: \"verbose\",\n        message: `BleTransport(${String(this.id)}) mtu set to ${String(\n          mtuSize\n        )}`\n      });\n      this.mtuSize = mtuSize;\n    }\n\n    return this.mtuSize;\n  }\n\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n  exchange = (apdu: Buffer): Promise<Buffer> =>\n    this.exchangeAtomicImpl(async () => {\n      try {\n        const { debug } = this;\n\n        const msgIn = apdu.toString(\"hex\");\n        if (debug) debug(`=> ${msgIn}`); // eslint-disable-line no-console\n        logSubject.next({ type: \"ble-apdu-write\", message: msgIn });\n\n        const data = await merge(\n          this.notifyObservable.pipe(receiveAPDU),\n          sendAPDU(this.write, apdu, this.mtuSize)\n        ).toPromise();\n\n        const msgOut = data.toString(\"hex\");\n        logSubject.next({ type: \"ble-apdu-read\", message: msgOut });\n        if (debug) debug(`<= ${msgOut}`); // eslint-disable-line no-console\n\n        return data;\n      } catch (e) {\n        logSubject.next({\n          type: \"ble-error\",\n          message: \"exchange got \" + String(e)\n        });\n        if (this.notYetDisconnected) {\n          // in such case we will always disconnect because something is bad.\n          this.device.gatt.disconnect();\n        }\n        throw e;\n      }\n    });\n\n  setScrambleKey() {}\n\n  write = async (buffer: Buffer) => {\n    logSubject.next({\n      type: \"ble-frame-write\",\n      message: buffer.toString(\"hex\")\n    });\n    await this.writeCharacteristic.writeValue(buffer);\n  };\n\n  async close() {\n    if (this.exchangeBusyPromise) {\n      await this.exchangeBusyPromise;\n    }\n  }\n}\n"]}